openGL특징
 1. 저수준 라이브러리, 모델링보다 랜더링 기능이 주
 2. 개방된 표준으로 플랫폼에 독립적
 3. 개발 언어에도 독립적, 함수기반
 4. 하드웨어 가속기능으로 효율적인 동작

라이브러리구성
 - GL :기본 그리기, 기초도형 렌더링
 - GLU : 분할, 투영, 입체도형 생성

glClearColor() : 배경색 지정
glClear() : 배경 삭제 버퍼삭제
glColor() : 도형의 색상

상태머신 : 그리기에 영향을 미치는 여러 변수들의 집합
 - 전역적, 영속적인 저장소, 바꾸기전까지 유효, 이전값 계속 사용 가능
 - GL_COLOR_CLEAR_VALUE : 배경색상 저장
 - GL_CURRENT_COLOR : 현재 정점 색상

진위형 옵션 : 사용할건가? 아닌가?
 - glEnable() : 설정
 - glDisable() : 해제
 - glIsEnabled() : 조사

glPointSize() : 점크기 지정
glLineWidth() : 선의 두께변경
glLineStipple() : 스티플(점묘법)

glRect() : 사각형그리기

GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN
GL_QUADS, GL_QUAD_STRIP, 

GL_POLYGON 모드의 3가지 조건
 - 정점의 선이 교차해서는 안된다. 
 - 다각형은 볼록해야 한다.
 - 모든 정점은 같은 평면내에 있어야 한다.

블랜딩 : 색상버퍼에 이미 기록되어 있는 값과 새로 그려지는 값의 논리 연산 방법을 지정
 - glBlendFunc(새로기록되는 값, 이미기록되어있는값) : 연산정의
 - glBlendEquation(모드) : 연산 방법

안티알리아싱 : 계단현상 같은걸 제거, 감소 기술
힌트 : 라이브러리에게 어떤 옵션을 더 우선시 할 것인지 제안 

openGL : 독립성을 위해 윈도우 관리에 대한 기능 제공 x
AUX : 이 빈틈을 메워주는 것 운영체제마다 호환성이 나쁘고 운영체제의 지식을 요구해 배우기 어렵다.
GLUT : 운영체제를 완벽히 추상화해 운영체제 독립성제공, 그래픽과는 상관없고 그리기 위한 껍데기 제작

void main(int a, char** v)
glutInit(&a, v); 
glutInitWindowSize(w,h) : 윈도우 크기
glutInitWindowPosition(x,y) : 윈도우 위치
glutInitDisplayMode() : 디스플레이모드, 깊이,더블 버퍼 여기 넣음
glutCreateWindow(name) : 윈도우 생성, 필수 호출
glutDisplayFunc() : 여기에 함수 실행
glutSetWindowTitle() : 이름바꾸기
glutMainLoop() : 메인루프
glutPostRedisplay() : 다시그려야함을 알림★

깊이테스트 : glutInitDisplayMode에 GLUT_DEPTH 플래그 지정
 - 깊이버퍼는 켜짐 디폴트지만 깊이기능 테스트는 꺼져있다.
 - glEnable(GL_DEPTH_TEST)
 - 순서대로 그려지니까 도형의 위아래를 따지자
 - 깊이테스트 : 모든 정점의 깊이값을 버퍼에 저장 후 그릴 때 비교
 - 저건 2차원이나됨, 3차원은 화소 깊이값 이용
 - 이걸 저장하는게 깊이버퍼고, 화면 삭제시 색상이랑 깊이 둘 다 삭제

와인딩 : 정점 구성 순서
 - 반시계 방향이 앞면 : GL_CCW (디폴트)
 - 시계 방향이 앞면 : GL_CW
 - glFrontFace()

컬링
 - 불필요한 그리기를 하지 않는 기법
 - 그리기 속도가 빨라진다.
 - 컬링키면 깊이테스트 생략 가능

쉐이드모델 : 다각형 채색방식, 색상 채택법
 - GL_FLAT : 다각형 전체를 균일하게
   * 폴리곤 정점 색상 사용, 사각, 삼각 :  마지막 정점 색상 사용
 - GL_SMOOTH  : 모든 정점의 색상을 섞어서

폴리곤모드 : 도형 그리는 방법
 - GL_POINT : 정점만 점으로 
 - GL_LINE : 선그리기
 - GL_FILL : 면으로 채우기

에지 플래그 : 이 선분이 외곽선인지, 내부 선분인지
 - glEdgeFlag() : (TRUE-외곽선), (FALSE-내부선)

배열 인덱스 : 공유하는 정점을 합치면 어떨까?
 - glDrawElements(그리기모드, 배열크기, 배열 요소타입, 인덱스배열)
 - 색상배열도 같은데 대신 전후관계 표현을 위해 깊이테스트 요구

<변환과정>
 관측모델링(모델뷰행렬) > 투영(투영행렬) > 원근분할정규화 > 뷰포트변환 > 레스터변환
 - glMatrixMode(mode) : 행렬 연산의 목적지 지정
    - GL_MODELVIEW : 모델뷰 변환 행렬, 디폴트
    - GL_PROJECTION : 투영 행렬
    - GL_TEXTURE : 텍스처 행렬
    - GL_COLOR : 색상행렬
  - glLoadIdentity() : 행렬리셋, 단위행렬로 변환

관측변환
 - 관측 : 3차원 공간의 장면을 바라본다. 카메라 변환
 - gluLookAt(eyeXYZ, centerXYZ, upXYZ)
 - eye : 시선, 관찰자 위치
 - center : 관찰자가 보는 좌표
 - up : 업벡터, 카메라 각도, 시선과 평행x


모델링변환
 - 3차원공간에 배치된 물체 변환
 - glTranslate(x, y, z) : 물체 위치 이동, 누적적용
 - 초기화 : 단위행렬초기화, 스택
 - glPushMatrix(), glPopMatrix() 2D: 32, 3D : 2
 - glScale() : 확대 1보다 크면 확대 작으면 축소
 - glRotate() : 반시계 방향 회전
 - 복합변환 : 2개 이상 변환을 동시 적용

투영
 - 모델뷰 변환 : 3차원 공간상에서 물체의 위치나 크기 조정
 - 투영 : 3차원 좌표를 2차원으로 변경
   - 클리핑 : 보이는 영역을 잘라내는 것
   - 가시영역 : 클리핑 영역 안쪽의 보이는 범위
 - glutReshapeFunc() : 작업영역의 w,h 화면 크기가 바뀌는 시점에 처리
 - 직교투영(평행투영) : 좌우하상근원순서로 클리핑 영역 선언, 설계
 - glOrtho() : 직교투영
 - 원근투영 : 거리에 따라 물체의 크기가 달라짐, 사실적
 - glFrustum() : 원근투영, 절두체
 - gluPerspective() : 원근투영

뷰포트 변환
 - 투영변환 후에 수행
 - 클리핑/투영된 평면 이미지를 윈도우 어디에 출력할건가?
 - glViewport(x, y, w, h) : 좌하단이 원점!!!
 - ReShape 콜벡에서 이녀석 호출
 - 찌그러짐 조절법 : 뷰포트조정, 직교투영시 클리핑 영역 조절

래스터변환 : 결국 그려내기 위해 정수로 표현하는것

행렬
 - openGL 변환 행렬 : 4*4, 열기준행렬
 - glLoadMatrix(): 열기준행렬 읽기
 - glLoadTransposeMatix() : 행기준행렬 읽기
 - 행렬 곱셈법 알아야긋다..

색상 : 물체 표면이 주변에 존재하는 빛 성분중 어떤걸 반사하는가?
 - 주변광 : 여러경로로 반사 및 재반사 되어 방향성을 잃은 빛, 밝기일정
 - 분산광 : 한 방향으로 들어와 여러 방향으로 흩어지는 빛 받으면 빛남
 - 반사광 :  한방향으로 들어와서 한방향으로만 반사되는 빛

조명 : GL_LIGHT0 ~ GL_LIGHT7까지 지원, 디폴트로 꺼짐
 - GL_LIGHTING으로 조명 기능 키고, GL_LIGHT0으로 각 조명도 켜야함
 - glLight(조명번호, 속성, 속성값) : 조명에 대한 성질
 - 주변광,분산광,반사광 디폴트 (0, 0, 0, 1)
 - BUT 분산광, 조명광의 GL_LIGHT0은 (1, 1, 1, 1)이 디폴트
 - GL_AMBIENT : 주변광 세기, 색상감도설정
 - GL_DIFFUSE : 분산광 세기
 - GL_SPECULAR : 반사광 세기
 - Attach light 옵션 : 회전 먼저 하고 조명 배치, 조명도 회전


재질 : 어떤 색상요소를 얼마나 반사할 것인가를 지정하는 성질
 - glMaterial(어떤면, 설정속성, 속성값) : 다각형 재질 지정
   - 면 : GL_FRONT, GL_BACK, GL_FRONT_AND_BACK
   - 각 조명에 대한 반사도
 - 조명의 특정 색상요소가 1.0 넘으면 내림처리

색상트래킹 : glColor로 지정한 색상을 재질로 사용하는것
 - GL_COLOR_MATERIAL 속성 키고
 - glColorMaterial(적용면, 조명종류)

비트맵 : 흑백이미지
픽셀맵 : 컬러이미지
 - 비트맵 만드는법
    > 흰색은 0 검은색은 1에 대응 후 16진수로 압축
    > 아래줄부터 배열에 기록
 - glPixelStore() : 비트맵 저장방식 변경
 - glRasterPos(x, y, z) : 비트맵 출력위치 설정
 - glBitmap() : 비트맵 출력

픽셀맵
 - glDrawPixels()
 - 32*32 픽셀맵 크기는 색상정보 3개가 더 있으니까 32*32*3
 - 버퍼 읽기, 복사위치 지정, 복사
   : glReadPixels(), glRasterPos(), glCopyPixels()
 - 비트맵 작업소
   > 싱글버퍼 : 프론트버퍼
   > 더블버퍼링 : 백 버퍼
   > glDrawBuffer(), glReadBuffer() : 대상버퍼 강제변환

폴리곤 스티플링 : 다각형 내부를 채우는 간단한 방법
 - 레스터 데이터만으로도 도형내부 채움
 - 비트맵 크기는 32 * 32 고정
 - 단색 무늬만 가능
 - 회전, 확대, 축소 미적용
 => 도형 내부 채우는 정석은 텍스터 맵핑


텍스처 맵핑
 - 3차원 물체 표면에 이미지 입힘
 - GL_TEXTURE_2D 기능 키기
 - 차원에 따라 한번에 하나 개별적 활성화
 - glTexImage2D(target, level, internalFormat, w, h, border, format, type, data)
 - target : 어떤 텍스처를 만드나
 - w,h : 2의 거듭승 크기, 경계선의 두께를 더해야함
 - border : 없으면 0
 - format : 레스터데이터 포멧
 - type : 픽셀 타입

좌표지정
 - 픽셀단위는 일관성x, 0~1사이 실수로 비율지정
 - glTexCoord : 텍스처 좌표지정

텍스처 맵핑 옵션
 - glTexEnv : 맵핑환경 지정
 - GL_MODULATE : 두 색상 곱함
 - GL_REPLACE : 색상 무시, 텍스처 덮어씌움
 - GL_ADD : 두 색상 더함
 - GL_BLEND : 블랜딩 색상과 텍스처 혼합

텍스처렌더링
 - glTexParameter(차원, 파라미터이름, 값)

텍스처필터링
 - 텍스처 맵으로부터 입힐 색상을 계산하는 과정
 - GL_TEXTURE_MIN_FILTER : 축소시의 필터링
 - GL_TEXTURE_MAG_FILTER : 확대시의 필터링
 - 최단거리(GL_NEAREST) 
   > 비율상 대응되는 위치의 텍셀값이용
   > 단순하되, 품질 떨어짐
 - 선형(GL_LINEAR)
   > 대응되는 위치 주변의 텍셀값에 대한 평균
   > 오버헤더 많아도 좋은 품질

텍스처 랩핑
 - GL_CLAMP : 경계부근 반복
 - GL_CLAMP_TOBORDER : 경계 텍셀의 값 반복
 - GL_MIRRORED_REPEAT : 반사 모양으로 반복
 - GL_REPEAT : 반복











